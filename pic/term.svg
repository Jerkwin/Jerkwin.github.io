<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="terminal" baseProfile="full" viewBox="0 0 703 469" width="703" version="1.1">
	<defs>
	<style id="generated-style"><![CDATA[:root{--animation-duration: 5191ms;}#screen{font-family:'DejaVu Sans Mono',monospace;font-style:normal;font-size:14px;}text{dominant-baseline:text-before-edge;}]]>
	.type{
		color:#fff;
		display: inline-block;
		position: relative;
		background-color: #1c1c1c;
		font-family:'DejaVu Sans Mono',monospace;
		font-style:bold;
		width: 650px;
		height: 350px;
		overflow: auto;
	}
		@keyframes blink-caret { 50% { background-color: transparent; } }
	.type:after {
		color: #ff005b;
		content: "|";
		vertical-align: baseline;
		animation:blink-caret .5s step-end infinite;
	}
	span{color: #ff005b; }
	span:before{content: "$ ";}
	.foreground{fill:#c5c5c5;}.background{fill:#1c1c1c;}
	.color0{fill:#1c1c1c;}.color1{fill:#ff005b;}.color2{fill:#cee318;}.color3{fill:#ffe755;}
	.color4{fill:#048ac7;}.color5{fill:#833c9f;}.color6{fill:#0ac1cd;}.color7{fill:#e5e5e5;}
	.color8{fill:#1c1c1c;}.color9{fill:#ff005b;}.color10{fill:#cee318;}.color11{fill:#ffe755;}
	.color12{fill:#048ac7;}.color13{fill:#833c9f;}.color14{fill:#0ac1cd;}.color15{fill:#e5e5e5;}
	#wide_track{transform:translate(150px,calc(100% - 45px));}
	#track{transform:translate(150px,calc(100% - 33px));}
	#slider_button{transform:translate(0px,calc(100% - 30px));}
	#timer{transform:translate(60px,calc(100% - 38px));font-family:'DejaVu Sans Mono',monospace;font-style:normal;font-size:14px;}
	#play-button{transform:translate(30px,calc(100% - 45px));}
	#pause-button{transform:translate(30px,calc(100% - 45px));}
	</style>
	<rect id="slider_wide_track" height="30px" width="65%"/>
	<rect id="slider_track" height="6px" width="65%"/>
	<circle id="slider_button" r="10px" class="color1"/>
	<g id="icon-play"><rect x="-5" y="0" width="25" height="30" class="background"/><path d="M0 4l14 11-14 11z"/></g>
	<g id="icon-pause"><rect x="-5" y="0" width="25" height="30" class="background"/><rect x="0" y="5" width="5" height="20"/><rect x="10" y="5" width="5" height="20"/></g>
	</defs>
	<rect id="terminalui" class="background" width="100%" height="100%" ry="4.5826941"/>
	<circle cx="24" cy="23" r="7" class="color1"/>
	<circle cx="44" cy="23" r="7" class="color3"/>
	<circle cx="64" cy="23" r="7" class="color2"/>
	<svg id="screen" width="656" x="23" y="50" viewBox="0 0 656 323" preserveAspectRatio="xMidYMin meet">
	<foreignObject x="0" y="0" width="656" height="323"><html xmlns="http://www.w3.org/1999/xhtml"><pre id="type" class="type"></pre></html></foreignObject>
	</svg>
	<text id="timer" class="foreground">0:00/0:00</text>
	<use xlink:href="#slider_wide_track" id="wide_track" class="background"/>
	<use xlink:href="#slider_track" id="track" class="foreground"/>
	<use xlink:href="#slider_button" id="slider_1" x="0px"><animate attributeName="x" begin="0ms;anim_slider_button.end" dur="0ms" from="0" to="0" id="anim_slider_button"/></use>
	<use xlink:href="#icon-play" id="play-button" class="foreground"/>
	<use xlink:href="#icon-pause" id="pause-button" class="foreground"/>
	<script>
	var terminal   = document.getElementById('terminal');
	var screen = terminal.getElementById('screen');
	var slider_1  = terminal.getElementById('slider_1');
	var anim_slider_button = document.getElementById('anim_slider_button');
	var style = getComputedStyle(terminal);
	//var animation_duration = parseInt(style.getPropertyValue('--animation-duration')) / 1000;
	var cmd='pwd■/c/Users/Jerkwin/Desktop/templates_files■ls■1.html\n1.svg\n2.svg\n_.html\n_.md\n___tmp___\n_window_frame_js.svg\ndracula.svg\ngjm8.svg\nmain.css\nolarized_light.html\np.html\np2.html\np3.html\np4.html\np5.html\np6.html\np7.html\np8.html\np9.html\np9.svg\nprogress_bar.svg\nsolarized_dark.svg\nwindow_frame.svg\nwindow_frame_js - 副本.svg\nwindow_frame_js.svg';cmd=cmd.split('■')
	var i, j, n, text=[], time=[], nchr=[], v=[1000, 2, 200]
	for(i=0, n=cmd.length/2; i&lt;n; i++) {
		text[3*i]='&lt;span>&lt;/span>'
		text[3*i+1]=cmd[2*i]+'\n'
		text[3*i+2]=cmd[2*i+1]+'\n'
	}
	allText=text.join('')
	time[0]=0; nchr[0]=0
	for(i=0, n=text.length; i&lt;n; i++) {
		nchr[i+1]=nchr[i]+text[i].length
		time[i+1]=time[i]+text[i].length/v[i%3]
	}
	var animation_duration = time[n]
	var typePanel = document.getElementById('type');
	function type(t){
		n=0; while(time[n]&lt;t) n++; n--
		if(n%3==0) N=nchr[n]+text[n].length
		else       N=nchr[n]+parseInt((t-time[n])*v[n%3])
		//console.log(allText.substring(0,N))
		typePanel.innerHTML = allText.substring(0,N)
		typePanel.scrollTop = typePanel.scrollHeight;
}
	function getTranslateX(elem) {
	  var style = window.getComputedStyle(elem);
	  var matrix = new WebKitCSSMatrix(style.webkitTransform);
	  return parseInt(matrix.m41)
	}
	track_begin = getTranslateX(terminal.getElementById('track'))
	anim_slider_button.setAttribute('from', track_begin);
	var track_width = terminal.getElementById('track').getBoundingClientRect().width;
	anim_slider_button.setAttribute('to', track_begin + track_width);
	var play_button = terminal.getElementById('play-button');
	var pause_button = terminal.getElementById('pause-button');
	// Set slider button animation duration
	anim_slider_button.setAttribute('dur', style.getPropertyValue('--animation-duration'));
	play_button.setAttribute('display', 'none');
	pause_button.setAttribute('display', 'inline');
	function togglePlayPause() {
		if (terminal.animationsPaused() || screen.animationsPaused()) {
			terminal.unpauseAnimations()
			screen.unpauseAnimations()
			play_button.setAttribute('display', 'none')
			pause_button.setAttribute('display', 'inline')
		} else {
			terminal.pauseAnimations()
			screen.pauseAnimations()
			play_button.setAttribute('display', 'inline')
			pause_button.setAttribute('display', 'none')
		}
	};
	play_button.addEventListener('click', togglePlayPause, false)
	pause_button.addEventListener('click', togglePlayPause, false)
	var limitLower = parseInt(anim_slider_button.getAttribute('from'));
	/* Subtract a few pixels so that bringing the button to the end of the track does make it jump to
	the beginning */
	var limitUpper = parseInt(anim_slider_button.getAttribute('to')) - 8;
	var timer = terminal.getElementById('timer')
	function timer_from_ms(t) {
		minutes = Math.floor(t / 60);
		seconds = Math.floor(t % 60);
		return minutes + ':' + ("0" + seconds).slice(-2)
	}
	function update_timer(){
		var current_time = terminal.getCurrentTime() % animation_duration
		timer.textContent =  timer_from_ms(current_time) + "/" + timer_from_ms(animation_duration)
		type(current_time)
	}
	setInterval(update_timer, "500ms")
	// Return X position for an event
	function mx(evt){
		var pt = terminal.createSVGPoint();
		pt.x = evt.clientX;
		return pt.matrixTransform(terminal.getScreenCTM().inverse());
	}
	// Set the current time of the animation to get the slider button under the cursor
	var move = function(evt){
		var cursor_position = mx(evt);
		if ( cursor_position.x &lt; limitLower || cursor_position.x &gt; limitUpper ) {
			return;
		}
		new_time = animation_duration * (cursor_position.x - limitLower) / (limitUpper - limitLower)
		terminal.setCurrentTime(new_time)
		screen.setCurrentTime(new_time)
	};
	// Move the slider button to the cursor position when a click happens on the track of the slider
	terminal.getElementById('wide_track').addEventListener('click', move, false);
	terminal.getElementById('track').addEventListener('click', move, false);
	// Enable slider button dragging along the track
	var dragging = false;
	slider_1.addEventListener('mousedown',function(evt){
			is_playing = !(terminal.animationsPaused() &amp;&amp; screen.animationsPaused())
			if (is_playing) {
				terminal.pauseAnimations()
				screen.pauseAnimations()
			}
			dragging = true;
			terminal.addEventListener('mousemove', move, false);
			document.documentElement.addEventListener('mouseup', function(){
					dragging = false;
					if (is_playing) {
						terminal.unpauseAnimations()
						screen.unpauseAnimations()
					}
					terminal.removeEventListener('mousemove', move, false);
			}, false);
	}, false);
	</script>
</svg>
